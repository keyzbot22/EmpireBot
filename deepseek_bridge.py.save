from flask import Flask, request, jsonifykkfrom flask import Flask, 
request, jsonify import os import requests from telegram import Bot import 
os app = Flask(__name__) import requests # === ENVIRONMENT VARIABLES === 
CHATGPT_API_KEY = os.getenv("CHATGPT_API_KEY") DEEPSEEK_API_KEY = 
os.getenv("DEEPSEEK_API_KEY") NOTION_API_KEY = os.getenv("NOTION_API_KEY") 
NOTION_DATABASE_ID = os.getenv("NOTION_DATABASE_ID") TELEGRAM_TOKEN = 
os.getenv("TELEGRAM_TOKEN") API_SECRET = os.getenv("API_SECRET", 
"KeyzEmpire2024") bot = Bot(token=TELEGRAM_TOKEN) from telegram import Bot 
# === SECURITY CHECK === @app.before_request def check_secret():
    if request.endpoint != 'status': app = Flask(__name__)  if 
request.headers.get("X-API-SECRET") != API_SECRET:
            return jsonify({"error": "Unauthorized"}), 401 # ====== 
ENVIRONMENT VARS ====== @app.route('/status') def status(): 
CHATGPT_API_KEY = os.getenv("CHATGPT_API_KEY")  return jsonify({"status": 
"EmpireBot is live üöÄ"}) DEEPSEEK_API_KEY = os.getenv("DEEPSEEK_API_KEY") 
# === NOTION LOGGER === def log_to_notion(task, result): NOTION_API_KEY = 
os.getenv("NOTION_API_KEY")  url = "https://api.notion.com/v1/pages" 
NOTION_DATABASE_ID = os.getenv("NOTION_DATABASE_ID")  headers = { 
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")  "Authorization": f"Bearer 
{NOTION_API_KEY}", API_SECRET = os.getenv("API_SECRET", "KeyzEmpire2024")  
"Notion-Version": "2022-06-28", bot = Bot(token=TELEGRAM_TOKEN)  
"Content-Type": "application/json"
    } data = { # ====== SECURITY CHECK ====== "parent": {"database_id": 
NOTION_DATABASE_ID}, @app.before_request "properties": { def 
check_secret():  "Task": {"title": [{"text": {"content": task}}]},
    if request.endpoint != 'status':  "Result": {"rich_text": [{"text": 
{"content": result}}]}
        if request.headers.get("X-API-SECRET") != API_SECRET:  }
            return jsonify({"error": "Unauthorized"}), 401 }
    requests.post(url, headers=headers, json=data) @app.route('/status') # 
=== CHATGPT ROUTE === @app.route('/ask_chatgpt', methods=['POST']) def 
ask_chatgpt(): def status():  data = request.json
    return jsonify({"status": "EmpireBot is live üöÄ"})  prompt = 
    data.get("query", "") headers = {
        "Authorization": f"Bearer {CHATGPT_API_KEY}", "Content-Type": 
        "application/json"
# ====== NOTION LOGGING ====== } def log_to_notion(task, result):  
payload = {
    url = "https://api.notion.com/v1/pages"  "model": "gpt-4", headers = { 
    "messages": [
        "Authorization": f"Bearer {NOTION_API_KEY}", {"role": "system", 
"content": "You are a powerful empire assistant."},
        "Notion-Version": "2022-06-28",
        "Content-Type": "application/json"
    }
    data = {
        "parent": {"database_id": NOTION_DATABASE_ID},
        "properties": {
            "Task": {"title": [{"text": {"content": task}}]},
            "Result": {"rich_text": [{"text": {"content": result}}]}
        }
    }
    requests.post(url, headers=headers, json=data)

# ====== CHATGPT BRIDGE ======
@app.route('/ask_chatgpt', methods=['POST'])
def ask_chatgpt():
    data = request.json
    prompt = data.get("query", "")
    headers = {
        "Authorization": f"Bearer {CHATGPT_API_KEY}",
        "Content-Type": "application/json"
    }
    payload = {
        "model": "gpt-4",
        "messages": [
            {"role": "system", "content": "You are a powerful empire assistant."},
            {"role": "user", "content": prompt}
        ]
    }
    response = requests.post("https://api.openai.com/v1/chat/completions", headers=headers, json=payload)
    message = response.json()["choices"][0]["message"]["content"]
    log_to_notion("ChatGPT", message)
    return jsonify({"response": message})

# ====== DEEPSEEK BRIDGE ======
@app.route('/ask_deepseek', methods=['POST'])
def ask_deepseek():
    data = request.json
    prompt = data.get("query", "")
    headers = {
        "Authorization": f"Bearer {DEEPSEEK_API_KEY}",
        "Content-Type": "application/json"
    }
    payload = {
        "model": "deepseek-chat",
        "messages": [{"role": "user", "content": prompt}]
    }
    response = requests.post("https://api.deepseek.com/v1/chat/completions", headers=headers, json=payload)
    message = response.json().get("choices", [{}])[0].get("message", {}).get("content", "No reply")
    log_to_notion("DeepSeek", message)
    return jsonify({"response": message})

# ====== TELEGRAM COMMANDS ======
@app.route('/telegram', methods=['POST'])
def telegram_webhook():
    data = request.json
    chat_id = data["message"]["chat"]["id"]
    text = data["message"]["text"]

    if text == "/status":
        bot.send_message(chat_id=chat_id, text="‚úÖ EmpireBot is running and watching the throne.")
    elif text == "/quote":
        payload = {"query": "Give me a money + mindset quote"}
        headers = {"X-API-SECRET": API_SECRET}
        response = requests.post("http://localhost:6006/ask_chatgpt", headers=headers, json=payload)
        bot.send_message(chat_id=chat_id, text=response.json().get("response", "‚ö†Ô∏è No quote found"))
    else:
        bot.send_message(chat_id=chat_id, text="üß† Unknown command. Try /status or /quote.")

    return jsonify({"ok": True})

if __name__ == "__main__":
    app.run(port=6006)
# ====== NOTION LOGGING ======
def log_to_notion(task, result):
    url = "https://api.notion.com/v1/pages"
    headers = {
        "Authorization": f"Bearer {NOTION_API_KEY}",
        "Notion-Version": "2022-06-28",
        "Content-Type": "application/json"
    }
    data = {
        "parent": {"database_id": NOTION_DATABASE_ID},
        "properties": {
            "Task": {"title": [{"text": {"content": task}}]},
            "Result": {"rich_text": [{"text": {"content": result}}]}
        }
    }
    requests.post(url, headers=headers, json=data)

# ====== CHATGPT BRIDGE ======
@app.route('/ask_chatgpt', methods=['POST'])
def ask_chatgpt():
    data = request.json
    prompt = data.get("query", "")
    headers = {
        "Authorization": f"Bearer {CHATGPT_API_KEY}",
        "Content-Type": "application/json"
    }
    payload = {
        "model": "gpt-4",
        "messages": [
            {"role": "system", "content": "You are a powerful empire assistant."},
            {"role": "user", "content": prompt}
        ]
    }
    response = requests.post("https://api.openai.com/v1/chat/completions", headers=headers, json=payload)
    message = response.json()["choices"][0]["message"]["content"]
    log_to_notion("ChatGPT", message)
    return jsonify({"response": message})

# ====== DEEPSEEK BRIDGE ======
@app.route('/ask_deepseek', methods=['POST'])
def ask_deepseek():
    data = request.json
    prompt = data.get("query", "")
    headers = {
        "Authorization": f"Bearer {DEEPSEEK_API_KEY}",
        "Content-Type": "application/json"
    }
    payload = {
        "model": "deepseek-chat",
        "messages": [{"role": "user", "content": prompt}]
    }
    response = requests.post("https://api.deepseek.com/v1/chat/completions", headers=headers, json=payload)
    message = response.json().get("choices", [{}])[0].get("message", {}).get("content", "No reply")
    log_to_notion("DeepSeek", message)
    return jsonify({"response": message})

# ====== TELEGRAM COMMANDS ======
@app.route('/telegram', methods=['POST'])
def telegram_webhook():
    data = request.json
    chat_id = data["message"]["chat"]["id"]
    text = data["message"]["text"]

    if text == "/status":
        bot.send_message(chat_id=chat_id, text="‚úÖ EmpireBot is running and watching the throne.")
    elif text == "/quote":
        payload = {"query": "Give me a money + mindset quote"}
        headers = {"X-API-SECRET": API_SECRET}
        response = requests.post("http://localhost:6006/ask_chatgpt", headers=headers, json=payload)
        bot.send_message(chat_id=chat_id, text=response.json().get("response", "‚ö†Ô∏è No quote found"))
    else:
        bot.send_message(chat_id=chat_id, text="üß† Unknown command. Try /status or /quote.")

    return jsonify({"ok": True})

if __name__ == "__main__":
    app.run(port=6006)
bhhh ====== NOTION LOGGING ======
def log_to_notion(task, result):
    url = "https://api.notion.com/v1/pages"
    headers = {
        "Authorization": f"Bearer {NOTION_API_KEY}",
        "Notion-Version": "2022-06-28",
        "Content-Type": "application/json"
    }
    data = {
        "parent": {"database_id": NOTION_DATABASE_ID},
        "properties": {
            "Task": {"title": [{"text": {"content": task}}]},
            "Result": {"rich_text": [{"text": {"content": result}}]}
        }
    }
    requests.post(url, headers=headers, json=data)

# ====== CHATGPT BRIDGE ======
@app.route('/ask_chatgpt', methods=['POST'])
def ask_chatgpt():
    data = request.json
    prompt = data.get("query", "")
    headers = {
        "Authorization": f"Bearer {CHATGPT_API_KEY}",
        "Content-Type": "application/json"
    }
    payload = {
        "model": "gpt-4",
        "messages": [
            {"role": "system", "content": "You are a powerful empire assistant."},
            {"role": "user", "content": prompt}
        ]
    }
    response = requests.post("https://api.openai.com/v1/chat/completions", headers=headers, json=payload)
    message = response.json()["choices"][0]["message"]["content"]
    log_to_notion("ChatGPT", message)
    return jsonify({"response": message})

# ====== DEEPSEEK BRIDGE ======
@app.route('/ask_deepseek', methods=['POST'])
def ask_deepseek():
    data = request.json
    prompt = data.get("query", "")
    headers = {
        "Authorization": f"Bearer {DEEPSEEK_API_KEY}",
        "Content-Type": "application/json"
    }
    payload = {
        "model": "deepseek-chat",
        "messages": [{"role": "user", "content": prompt}]
    }
    response = requests.post("https://api.deepseek.com/v1/chat/completions", headers=headers, json=payload)
    message = response.json().get("choices", [{}])[0].get("message", {}).get("content", "No reply")
    log_to_notion("DeepSeek", message)
    return jsonify({"response": message})

# ====== TELEGRAM COMMANDS ======
@app.route('/telegram', methods=['POST'])
def telegram_webhook():
    data = request.json
    chat_id = data["message"]["chat"]["id"]
    text = data["message"]["text"]

    if text == "/status":
        bot.send_message(chat_id=chat_id, text="‚úÖ EmpireBot is running and watching the throne.")
    elif text == "/quote":
        payload = {"query": "Give me a money + mindset quote"}
        headers = {"X-API-SECRET": API_SECRET}
        response = requests.post("http://localhost:6006/ask_chatgpt", headers=headers, json=payload)
        bot.send_message(chat_id=chat_id, text=response.json().get("response", "‚ö†Ô∏è No quote found"))
    else:
        bot.send_message(chat_id=chat_id, text="üß† Unknown command. Try /status or /quote.")

    return jsonify({"ok": True})

if __name__ == "__main__":
    app.run(port=6006)
gggggj            {"role": "user", "content": prompt}
        ]
    }
    response = requests.post("https://api.openai.com/v1/chat/completions", headers=headers, json=payload)
    message = response.json()["choices"][0]["message"]["content"]
    log_to_notion("ChatGPT", message)
    return jsonify({"response": message})

# === DEEPSEEK ROUTE ===
@app.route('/ask_deepseek', methods=['POST'])
def ask_deepseek():
    data = request.json
    prompt = data.get("query", "")
    headers = {
        "Authorization": f"Bearer {DEEPSEEK_API_KEY}",
        "Content-Type": "application/json"
    }
    payload = {
        "model": "deepseek-chat",
        "messages": [{"role": "user", "content": prompt}]
    }
    response = requests.post("https://api.deepseek.com/v1/chat/completions", headers=headers, json=payload)
    message = response.json().get("choices", [{}])[0].get("message", {}).get("content", "No reply")
    log_to_notion("DeepSeek", message)
    return jsonify({"response": message})

# === TELEGRAM COMMAND ROUTE ===
@app.route('/telegram', methods=['POST'])
def telegram_webhook():
    data = request.json
    chat_id = data["message"]["chat"]["id"]
    text = data["message"]["text"]

    if text == "/status":
        bot.send_message(chat_id=chat_id, text="‚úÖ EmpireBot is running.")
    elif text == "/quote":
        payload = {"query": "Give me a mindset and wealth quote"}
        headers = {"X-API-SECRET": API_SECRET}
        r = requests.post("http://localhost:6006/ask_chatgpt", headers=headers, json=payload)
        bot.send_message(chat_id=chat_id, text=r.json().get("response", "‚ö†Ô∏è No response"))
    else:
        bot.send_message(chat_id=chat_id, text="ü§ñ Try /status or /quote")

    return jsonify({"ok": True})

if __name__ == "__main__":
    app.run(port=6006)

